import imrt_robot_serial
import signal
import time
import sys
import random
import pygame

num = 0
dance = "y"
shut_down = "n"

LEFT = -1
RIGHT = 1
FORWARDS = 1
BACKWARDS = -1
DRIVING_SPEED = 100
TURNING_SPEED = 100
HARD_SPEED = 250
CORRECTING_SPEED = 150 #ADD (150 good speed)
HALF_SPEED = 50
STOP_DISTANCE = 15 #Original 25
CORRECT_DISTANCE = 25 #ADD (recheck once turn code added in, might be too low?)
CRASH_DISTANCE = 15 #For hard correcting
TURN_DISTANCE = 80 #Change if too low
CHECK_DISTANCE = 25 #checking after turning slightly higher due to reversing
WALL_DISTANCE = 5 #for getting out of the wall

def stop_robot(duration):

    iterations = int(duration * 10)
    
    for i in range(iterations):
        motor_serial.send_command(0, 0)
        time.sleep(0.10)



def drive_robot(direction, duration):
    
    speed = DRIVING_SPEED * direction
    iterations = int(duration * 10)

    for i in range(iterations):
        motor_serial.send_command(speed, speed)
        time.sleep(0.10)



def turn_robot_90_angle(direction): #90turn, 20 for low batterie, 16 OK

    iterations = (15)
    
    for i in range(iterations):
        motor_serial.send_command(TURNING_SPEED * direction, -TURNING_SPEED * direction)
        time.sleep(0.10)
        
def turn_robot_small_angle(direction): #get it away from wall
    
    iteration = (5)
    
    for i in range(iteration):
        motor_serial.send_command(TURNING_SPEED * direction, -TURNING_SPEED * direction)
        time.sleep(0.10)

def turn_robot_dance(direction): #small dance code

    iterations = (5)
    
    for i in range(iterations):
        motor_serial.send_command(CORRECTING_SPEED * direction, -CORRECTING_SPEED * direction)
        time.sleep(0.10)

def turn_robot_360(direction): #360 dance code

    iterations = (60)
    
    for i in range(iterations):
        motor_serial.send_command(CORRECTING_SPEED * direction, -CORRECTING_SPEED * direction)
        time.sleep(0.10)


def correct_robot_right():  #ADD works and right direction

    direction = 1
    iterations = 5
    
    for i in range(iterations):
        motor_serial.send_command(CORRECTING_SPEED * 1, TURNING_SPEED * 1)
        time.sleep(0.10)

def correct_robot_left():  #ADD works and right direction

    direction = 1
    iterations = 5
    
    for i in range(iterations):
        motor_serial.send_command(TURNING_SPEED * 1, CORRECTING_SPEED * 1)
        time.sleep(0.10)
        
def hard_robot_right():  #HARD correct right

    direction = 1
    iterations = 2
    
    for i in range(iterations):
        motor_serial.send_command(HARD_SPEED * 1, TURNING_SPEED * 1)
        time.sleep(0.10)

def hard_robot_left():  #HARD correct left

    direction = 1
    iterations = 1
    
    for i in range(iterations):
        motor_serial.send_command(HALF_SPEED * 1, HARD_SPEED * 1)
        time.sleep(0.10)


def hold_robot_right(direction):  #Keeping robot to the right

    iterations = 2
    
    for i in range(iterations):
        motor_serial.send_command(HARD_SPEED * 1, TURNING_SPEED * 1)
        time.sleep(0.10)
 

pygame.mixer.pre_init(44100, -16, 2, 2048)
pygame.init()

sound_1 = pygame.mixer.Sound('/home/student/Music/sound_1.wav')
sound_2 = pygame.mixer.Sound('/home/student/Music/sound_2.wav')
sound_3 = pygame.mixer.Sound('/home/student/Music/sound_3.wav')
sound_4 = pygame.mixer.Sound('/home/student/Music/sound_4.wav')
walle_sounds = [sound_1, sound_2, sound_3, sound_4]


execution_frequency = 10 
execution_period = 1. / execution_frequency


motor_serial = imrt_robot_serial.IMRTRobotSerial()


try:
    motor_serial.connect("/dev/ttyACM0")
except:
    print("Could not open port. Is your robot connected?\nExiting program")
    sys.exit()

    
motor_serial.run()

print("Entering loop. Ctrl+c to terminate")
while not motor_serial.shutdown_now :

    
    dist_1 = motor_serial.get_dist_1()
    dist_2 = motor_serial.get_dist_2()
    dist_3 = motor_serial.get_dist_3()
    dist_4 = motor_serial.get_dist_4()
    print("Dist 1:", dist_1, "   Dist 2:", dist_2, "   Dist 3:", dist_3, "   Dist 4:", dist_4)

    if dist_1 < STOP_DISTANCE or dist_2 < STOP_DISTANCE: #Robot wallstop
       print("Oh shit!")
       stop_robot(1)
       drive_robot(BACKWARDS, 0.5)
       turn_robot_90_angle(1)
       dist_1 = motor_serial.get_dist_1()
       dist_2 = motor_serial.get_dist_2()
       
       if dist_1 < CHECK_DISTANCE or dist_2 < CHECK_DISTANCE:
         print("Not this way.")
         turn_robot_90_angle(-1)
         turn_robot_90_angle(-1)
         dist_1 = motor_serial.get_dist_1()
         dist_2 = motor_serial.get_dist_2()
         
         if dist_1 < CHECK_DISTANCE or dist_2 < CHECK_DISTANCE:
           print("I give up!")
           turn_robot_90_angle(-1)
        
           
        
    else:
      drive_robot(FORWARDS, 0.1)
      
    if dist_3 < CORRECT_DISTANCE or dist_4 < CORRECT_DISTANCE: #robot correct
      drive_robot(FORWARDS, 0.1)
      
      if dist_4 < WALL_DISTANCE:
          turn_robot_small_angle(-1)
          
      elif dist_3 < WALL_DISTANCE:
          turn_robot_small_angle(1)
      
      elif dist_4 < CRASH_DISTANCE:
          hard_robot_left()
      
      elif dist_3 < CRASH_DISTANCE:
          hard_robot_right()
      
      elif dist_4 < CORRECT_DISTANCE:
          correct_robot_left()
      
      elif dist_3 < CORRECT_DISTANCE:
          correct_robot_right()
    
    elif dist_4 > TURN_DISTANCE: #Hold robot to right wall
        hold_robot_right(1)
        dist_1 = motor_serial.get_dist_1()
        dist_2 = motor_serial.get_dist_2()
        dist_3 = motor_serial.get_dist_3()
        dist_4 = motor_serial.get_dist_4()
        
    else:
        drive_robot(FORWARDS, 0.1)
    num = num + 1
    if num == 25:
        random_sound = random.choice(walle_sounds)
        random_sound.play()
        num = 0
        
user_ask = input("Victory dance?")

if user_ask == dance:
  pygame.mixer.pre_init(44100, -16, 2, 2048)
  pygame.init()
  sound_victory = pygame.mixer.Sound('/home/student/Music/victory.wav')
  sound_victory.play()
  time.sleep(4)
  for i in range(8):
    turn_robot_dance(1)
    turn_robot_dance(-1)
  turn_robot_360(1)

elif user_ask == shut_down:
  print("Buzzkill...")

else:
  print("Error, shutting down.")
